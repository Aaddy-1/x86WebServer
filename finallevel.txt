.intel_syntax noprefix
.globl _start

.section .text

child:
    mov rdi, 3
    mov rax, 0x03
    syscall             #SYS_Close
    

    # This is our read code
    mov rdi, 4
    mov rsi, rsp
    mov rdx, 1024
    mov rax, 0x0
    syscall

    mov r15, rax
    mov r9, rsp

    
    
    #r10 will contain the directory name
    mov r10, rsp

loop:
    mov al, [r10]
    cmp al, ' '
    je done
    add r10, 1
    jmp loop


done:
    add r10, 1
    mov r11, r10
    mov r12, 0

loop2:
    mov al, [r11]
    cmp al, ' '
    je done2
    add r11, 1
    add r12, 1
    jmp loop2

done2:
    mov byte ptr [r11], 0

    #Checking if it is a get request or a post request
    mov al, [r9]
    cmp al, 0x50
    jne GET


    # This is our open code
    mov rdi, r10
    mov rsi, 0x41
    mov rdx, 0777
    mov rax, 0x02
    syscall

    mov rbx, rax
    mov r13, r9
    mov r14, 0

loop3:
    mov eax, [r13]
    cmp eax, 0x0a0d0a0d
    je done3
    add r13, 1
    sub r15, 1
    jmp loop3
    
done3:
    add r13, 4
    sub r15, 4
    # This is our write code
    mov rdi, rbx
    mov rsi, r13
    mov rdx, r15
    mov rax, 0x01
    syscall

    mov rdi, 3
    mov rax, 0x03
    syscall             #SYS_Close

    # This is our write code
    mov rdi, 4
    lea rsi, [rip + response]
    mov rdx, 19
    mov rax, 0x01
    syscall


    jmp post_fork
GET:
    # This is our open code
    mov rdi, r10
    mov rsi, 0
    mov rdx, 0
    mov rax, 0x02
    syscall
    
    # This is our second read code
    mov rdi, rax
    mov rsi, rsp
    mov rdx, 256
    mov rax, 0x00
    syscall
    mov r9, rax
    

    # First close
    mov rdi, 3
    mov rax, 0x03
    syscall

    # This is our write code
    mov rdi, 4
    lea rsi, [rip + response]
    mov rdx, 19
    mov rax, 0x01
    syscall

    # This is our second write code
    mov rdi, 4
    mov rsi, rsp
    mov rdx, r9
    mov rax, 0x01
    syscall

    jmp post_fork

_start:
    mov rdi, 2
    mov rsi, 1
    mov rdx, 0
    mov rax, 0x29 # SYS_Socket
    syscall

    mov rdi, 3
    lea rsi, [rip + sockaddr] #Passing a pointer to sockaddr into rsi
    mov rdx, 16
    mov rax, 0x31 # SYS_Bind
    syscall

    mov rdi, 3
    mov rsi, 0
    mov rax, 0x32 # SYS_Listen
    syscall

    mov rdi, 3
    mov rsi, 0
    mov rdx, 0
    mov rax, 0x2B # SYS_Accept
    syscall

forking:
    mov rax, 0x39
    syscall             #SYS_Fork

    cmp rax, 0x00
    je child

blabla:
    mov rdi, 4
    mov rax, 0x03
    syscall             #SYS_Close

    mov rdi, 3
    mov rsi, 0
    mov rdx, 0
    mov rax, 0x2B # SYS_Accept
    syscall
    jmp forking


post_fork:
    mov rdi, 0
    mov rax, 60     # SYS_exit
    syscall

.section .data
sockaddr:
    .2byte 2
    .2byte 0x5000
    .4byte 0
    .8byte 0
response:
    .string "HTTP/1.0 200 OK\r\n\r\n"